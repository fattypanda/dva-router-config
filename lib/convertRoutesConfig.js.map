{"version":3,"sources":["../src/utils/routerConfig/convertRoutesConfig.js"],"names":["convertRoutesConfig","routes","app","map","route","path","component","models","exact","redirect","state","dynamicParams","Layout","length"],"mappings":";;;;;kBAUwBA,mB;;AAVxB;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,mBAAT,GAA8D;AAAA,MAAhCC,MAAgC,uEAAvB,EAAuB;;AAAA,iFAAJ,EAAI;AAAA,sBAAjBC,GAAiB;AAAA,MAAjBA,GAAiB,4BAAX,EAAW;;AAC3E,SAAOD,OAAOE,GAAP,CAAW,UAACC,KAAD,EAAW;AAAA,QACnBC,IADmB,GACkCD,KADlC,CACnBC,IADmB;AAAA,QACbC,SADa,GACkCF,KADlC,CACbE,SADa;AAAA,QACFC,MADE,GACkCH,KADlC,CACFG,MADE;AAAA,QACMN,MADN,GACkCG,KADlC,CACMH,MADN;AAAA,QACcO,KADd,GACkCJ,KADlC,CACcI,KADd;AAAA,QACqBC,QADrB,GACkCL,KADlC,CACqBK,QADrB;;AAE3B,QAAMC,QAAQ,EAAd;AACA,QAAMC,gBAAgB,EAAET,QAAF,EAAtB;;AAEA,4BAAUG,IAAV,KAAmB,mBAAKK,KAAL,EAAY,MAAZ,EAAoBL,IAApB,CAAnB;AACA,6BAAWG,KAAX,KAAqB,mBAAKE,KAAL,EAAY,OAAZ,EAAqBF,KAArB,CAArB;AACA;AACA,QAAI,0BAAYD,MAAZ,CAAJ,EAAwB;AACtB,yBAAKI,aAAL,EAAoB,QAApB,EAA8BJ,MAA9B;AACD;AACD,QAAI,wBAAUE,QAAV,CAAJ,EAAyB;AACvB;AACA,yBAAKE,aAAL,EAAoB,WAApB,EAAiC;AAAA,eAAM;AAAA,iBAAM,wBAAS,EAAEH,YAAF,EAASH,UAAT,EAAeI,kBAAf,EAAT,CAAN;AAAA,SAAN;AAAA,OAAjC;AACD,KAHD,MAGO,IAAI,0BAAYH,SAAZ,CAAJ,EAA4B;AACjC;AACA,yBAAKK,aAAL,EAAoB,WAApB,EAAiCL,SAAjC;AACD,KAHM,MAGA;AACL;AACA,yBAAKK,aAAL,EAAoB,WAApB,EAAiC;AAAA,eAAMC,gBAAN;AAAA,OAAjC;AACD;AACD;AACA,uBAAKF,KAAL,EAAY,WAAZ,EAAyB,uBAAQC,aAAR,CAAzB;AACA;AACA,QAAI,uBAASV,MAAT,KAAoBA,OAAOY,MAAP,GAAgB,CAAxC,EAA2C;AACzC,yBAAKH,KAAL,EAAY,QAAZ,EAAsBV,oBAAoBC,MAApB,EAA4B,EAAEC,QAAF,EAA5B,CAAtB;AACD;AACD,WAAOQ,KAAP;AACD,GA5BM,CAAP;AA6BD","file":"convertRoutesConfig.js","sourcesContent":["import Layout from './Layout';\nimport Redirect from './Redirect';\n\nimport dynamic from 'dva/dynamic';\nimport _isArray from 'lodash/isArray';\nimport _isBoolean from 'lodash/isBoolean';\nimport _isFunction from 'lodash/isFunction';\nimport _isString from 'lodash/isString';\nimport _set from 'lodash/set';\n\nexport default function convertRoutesConfig (routes = [], { app = {} } = {}) {\n  return routes.map((route) => {\n    const { path, component, models, routes, exact, redirect } = route;\n    const state = {};\n    const dynamicParams = { app };\n\n    _isString(path) && _set(state, 'path', path);\n    _isBoolean(exact) && _set(state, 'exact', exact);\n    //  记录 model\n    if (_isFunction(models)){\n      _set(dynamicParams, 'models', models);\n    }\n    if (_isString(redirect)) {\n      //  记录 redirect 组件\n      _set(dynamicParams, 'component', () => () => Redirect({ exact, path, redirect }));\n    } else if (_isFunction(component)) {\n      //  记录 配置中的组件\n      _set(dynamicParams, 'component', component);\n    } else {\n      //  记录 预设Layout 组件\n      _set(dynamicParams, 'component', () => Layout);\n    }\n    //  异步挂载组件（第一次挂载组件时会注册对应的 models ）\n    _set(state, 'component', dynamic(dynamicParams));\n    //  子路由配置\n    if (_isArray(routes) && routes.length > 0) {\n      _set(state, 'routes', convertRoutesConfig(routes, { app }));\n    }\n    return state;\n  });\n};\n"]}